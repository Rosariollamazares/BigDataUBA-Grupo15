{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "id": "Dh8MkXaG-c9Y",
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "source": [
    "# Big Data y Machine Learning (UBA) -  2025\n",
    "\n",
    "## Trabajo Práctico 1: Jugando con APIs y WebScraping "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RhBlm6mZ-c9e"
   },
   "source": [
    "### Reglas de formato y presentación\n",
    "- El trabajo debe estar debidamente documentado comentado (utilizando #) para que tanto los docentes como sus compañeros puedan comprender el código fácilmente.\n",
    "\n",
    "- El mismo debe ser completado en este Jupyter Notebook y entregado como tal, es decir en un archivo .ipynb\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ZEjGaa4U-c9g"
   },
   "source": [
    "### Fecha de entrega:\n",
    "Viernes 4 de Abril a las 13:00 hs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "N9TU2y7E-c9h"
   },
   "source": [
    "### Modalidad de entrega\n",
    "- Al finalizar el trabajo práctico deben hacer un último <i>commit</i> en su repositorio de GitHub llamado “Entrega final del tp”. \n",
    "- Asegurense de haber creado una carpeta llamada TP1. Este Jupyter Notebook y el correspondiente al TP1 deben estar dentro de esa carpeta.\n",
    "- También deben enviar el link de su repositorio -para que pueda ser clonado y corregido- a mi correo 25RO35480961@campus.economicas.uba.ar. Usar de asunto de email <i>\"Big Data - TP 1 - Grupo #\"</i> y nombrar el archivo <i>\"TP1_Grupo #\"</i> donde # es el número de grupo que le fue asignado.\n",
    "- La última versión en el repositorio es la que será evaluada. Por lo que es importante que: \n",
    "    - No envien el correo hasta no haber terminado y estar seguros de que han hecho el <i>commit y push</i> a la versión final que quieren entregar. \n",
    "    - No hagan nuevos <i>push</i> despues de haber entregado su versión final. Esto generaría confusión acerca de que versión es la que quieren que se les corrija.\n",
    "- En resumen, la carpeta del repositorio debe incluir:\n",
    "    - El codigo\n",
    "    - Un documento Word (Parte A) donde esten las figuras y una breve descripción de las mismas.\n",
    "    - El excel con los links webscrappeados (Parte B)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parte A"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ZXbrPraa-c9i"
   },
   "source": [
    "#### Ejercicio 1 - Jugando con APIs\n",
    "Usando la API del Banco Mundial [link](https://wbdata.readthedocs.io/en/stable/) , obtener dos series de indicadores para dos paises a elección en una consulta de búsqueda. Pueden buscar serie de indicadores de su interés."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>País</th>\n",
       "      <th>Indicador</th>\n",
       "      <th>Año</th>\n",
       "      <th>Valor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ARG</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2023</td>\n",
       "      <td>6.460753e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ARG</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2022</td>\n",
       "      <td>6.327901e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ARG</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2021</td>\n",
       "      <td>4.865641e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ARG</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2020</td>\n",
       "      <td>3.857405e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ARG</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2019</td>\n",
       "      <td>4.477547e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ARG</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2018</td>\n",
       "      <td>5.248199e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ARG</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2017</td>\n",
       "      <td>6.436284e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>ARG</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2016</td>\n",
       "      <td>5.575323e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>ARG</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2015</td>\n",
       "      <td>5.947493e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ARG</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2014</td>\n",
       "      <td>5.263197e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>ARG</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2023</td>\n",
       "      <td>4.553840e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>ARG</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2022</td>\n",
       "      <td>4.540790e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>ARG</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2021</td>\n",
       "      <td>4.531228e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>ARG</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2020</td>\n",
       "      <td>4.519196e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>ARG</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2019</td>\n",
       "      <td>4.497346e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>ARG</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2018</td>\n",
       "      <td>4.465488e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>ARG</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2017</td>\n",
       "      <td>4.428889e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>ARG</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2016</td>\n",
       "      <td>4.390031e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>ARG</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2015</td>\n",
       "      <td>4.347701e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>ARG</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2014</td>\n",
       "      <td>4.302407e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>BRA</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2023</td>\n",
       "      <td>2.173666e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>BRA</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2022</td>\n",
       "      <td>1.951924e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>BRA</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2021</td>\n",
       "      <td>1.670647e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>BRA</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2020</td>\n",
       "      <td>1.476107e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>BRA</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2019</td>\n",
       "      <td>1.873288e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>BRA</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2018</td>\n",
       "      <td>1.916934e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>BRA</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2017</td>\n",
       "      <td>2.063515e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>BRA</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2016</td>\n",
       "      <td>1.795693e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>BRA</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.802212e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>BRA</td>\n",
       "      <td>GDP (current US$)</td>\n",
       "      <td>2014</td>\n",
       "      <td>2.456044e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>BRA</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2023</td>\n",
       "      <td>2.111407e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>BRA</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2022</td>\n",
       "      <td>2.103064e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>BRA</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2021</td>\n",
       "      <td>2.095503e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>BRA</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2020</td>\n",
       "      <td>2.086608e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>BRA</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2019</td>\n",
       "      <td>2.074555e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>BRA</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2018</td>\n",
       "      <td>2.061073e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>BRA</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2017</td>\n",
       "      <td>2.047034e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>BRA</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2016</td>\n",
       "      <td>2.032181e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>BRA</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2015</td>\n",
       "      <td>2.016755e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>BRA</td>\n",
       "      <td>Population, total</td>\n",
       "      <td>2014</td>\n",
       "      <td>2.000851e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   País          Indicador   Año         Valor\n",
       "0   ARG  GDP (current US$)  2023  6.460753e+11\n",
       "1   ARG  GDP (current US$)  2022  6.327901e+11\n",
       "2   ARG  GDP (current US$)  2021  4.865641e+11\n",
       "3   ARG  GDP (current US$)  2020  3.857405e+11\n",
       "4   ARG  GDP (current US$)  2019  4.477547e+11\n",
       "5   ARG  GDP (current US$)  2018  5.248199e+11\n",
       "6   ARG  GDP (current US$)  2017  6.436284e+11\n",
       "7   ARG  GDP (current US$)  2016  5.575323e+11\n",
       "8   ARG  GDP (current US$)  2015  5.947493e+11\n",
       "9   ARG  GDP (current US$)  2014  5.263197e+11\n",
       "10  ARG  Population, total  2023  4.553840e+07\n",
       "11  ARG  Population, total  2022  4.540790e+07\n",
       "12  ARG  Population, total  2021  4.531228e+07\n",
       "13  ARG  Population, total  2020  4.519196e+07\n",
       "14  ARG  Population, total  2019  4.497346e+07\n",
       "15  ARG  Population, total  2018  4.465488e+07\n",
       "16  ARG  Population, total  2017  4.428889e+07\n",
       "17  ARG  Population, total  2016  4.390031e+07\n",
       "18  ARG  Population, total  2015  4.347701e+07\n",
       "19  ARG  Population, total  2014  4.302407e+07\n",
       "20  BRA  GDP (current US$)  2023  2.173666e+12\n",
       "21  BRA  GDP (current US$)  2022  1.951924e+12\n",
       "22  BRA  GDP (current US$)  2021  1.670647e+12\n",
       "23  BRA  GDP (current US$)  2020  1.476107e+12\n",
       "24  BRA  GDP (current US$)  2019  1.873288e+12\n",
       "25  BRA  GDP (current US$)  2018  1.916934e+12\n",
       "26  BRA  GDP (current US$)  2017  2.063515e+12\n",
       "27  BRA  GDP (current US$)  2016  1.795693e+12\n",
       "28  BRA  GDP (current US$)  2015  1.802212e+12\n",
       "29  BRA  GDP (current US$)  2014  2.456044e+12\n",
       "30  BRA  Population, total  2023  2.111407e+08\n",
       "31  BRA  Population, total  2022  2.103064e+08\n",
       "32  BRA  Population, total  2021  2.095503e+08\n",
       "33  BRA  Population, total  2020  2.086608e+08\n",
       "34  BRA  Population, total  2019  2.074555e+08\n",
       "35  BRA  Population, total  2018  2.061073e+08\n",
       "36  BRA  Population, total  2017  2.047034e+08\n",
       "37  BRA  Population, total  2016  2.032181e+08\n",
       "38  BRA  Population, total  2015  2.016755e+08\n",
       "39  BRA  Population, total  2014  2.000851e+08"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "BASE_URL = \"http://api.worldbank.org/v2/country/{}/indicator/{}\"\n",
    "\n",
    "\n",
    "paises = [\"ARG\", \"BRA\"]\n",
    "indicadores = [\"NY.GDP.MKTP.CD\", \"SP.POP.TOTL\"]\n",
    "\n",
    "\n",
    "resultados = []\n",
    "for pais in paises:\n",
    "    for indicador in indicadores:\n",
    "        url = BASE_URL.format(pais, indicador)\n",
    "        params = {\"format\": \"json\", \"per_page\": 10}\n",
    "        response = requests.get(url, params=params)\n",
    "\n",
    "        if response.status_code == 200:\n",
    "            data = response.json()\n",
    "            if len(data) > 1:\n",
    "                for entry in data[1]:\n",
    "                    resultados.append({\n",
    "                        \"País\": pais,\n",
    "                        \"Indicador\": entry[\"indicator\"][\"value\"],\n",
    "                        \"Año\": entry[\"date\"],\n",
    "                        \"Valor\": entry[\"value\"]\n",
    "                    })\n",
    "        else:\n",
    "            print(f\"Error al obtener datos para {pais} - {indicador}: {response.status_code}\")\n",
    "\n",
    "\n",
    "df = pd.DataFrame(resultados)\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ejercicio 2 - Repaso de Pandas\n",
    "Realicen una estadistica descriptiva de ambas series de indicadores comparando los dos países."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Estadística descriptiva por indicador y país:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">Valor</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>País</th>\n",
       "      <th>Indicador</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ARG</th>\n",
       "      <th>GDP (current US$)</th>\n",
       "      <td>10.0</td>\n",
       "      <td>5.445974e+11</td>\n",
       "      <td>8.773222e+10</td>\n",
       "      <td>3.857405e+11</td>\n",
       "      <td>4.961280e+11</td>\n",
       "      <td>5.419260e+11</td>\n",
       "      <td>6.232799e+11</td>\n",
       "      <td>6.460753e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Population, total</th>\n",
       "      <td>10.0</td>\n",
       "      <td>4.457692e+07</td>\n",
       "      <td>8.730048e+05</td>\n",
       "      <td>4.302407e+07</td>\n",
       "      <td>4.399746e+07</td>\n",
       "      <td>4.481417e+07</td>\n",
       "      <td>4.528220e+07</td>\n",
       "      <td>4.553840e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">BRA</th>\n",
       "      <th>GDP (current US$)</th>\n",
       "      <td>10.0</td>\n",
       "      <td>1.918003e+12</td>\n",
       "      <td>2.716206e+11</td>\n",
       "      <td>1.476107e+12</td>\n",
       "      <td>1.797323e+12</td>\n",
       "      <td>1.895111e+12</td>\n",
       "      <td>2.035617e+12</td>\n",
       "      <td>2.456044e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Population, total</th>\n",
       "      <td>10.0</td>\n",
       "      <td>2.062903e+08</td>\n",
       "      <td>3.786682e+06</td>\n",
       "      <td>2.000851e+08</td>\n",
       "      <td>2.035894e+08</td>\n",
       "      <td>2.067814e+08</td>\n",
       "      <td>2.093279e+08</td>\n",
       "      <td>2.111407e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Valor                                            \\\n",
       "                       count          mean           std           min   \n",
       "País Indicador                                                           \n",
       "ARG  GDP (current US$)  10.0  5.445974e+11  8.773222e+10  3.857405e+11   \n",
       "     Population, total  10.0  4.457692e+07  8.730048e+05  4.302407e+07   \n",
       "BRA  GDP (current US$)  10.0  1.918003e+12  2.716206e+11  1.476107e+12   \n",
       "     Population, total  10.0  2.062903e+08  3.786682e+06  2.000851e+08   \n",
       "\n",
       "                                                                                \n",
       "                                 25%           50%           75%           max  \n",
       "País Indicador                                                                  \n",
       "ARG  GDP (current US$)  4.961280e+11  5.419260e+11  6.232799e+11  6.460753e+11  \n",
       "     Population, total  4.399746e+07  4.481417e+07  4.528220e+07  4.553840e+07  \n",
       "BRA  GDP (current US$)  1.797323e+12  1.895111e+12  2.035617e+12  2.456044e+12  \n",
       "     Population, total  2.035894e+08  2.067814e+08  2.093279e+08  2.111407e+08  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"\\nEstadística descriptiva por indicador y país:\")\n",
    "summary = df.groupby([\"País\", \"Indicador\"]).describe()\n",
    "summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ejercicio 3 - Practicando con Matplotlib\n",
    "Armen dos gráficos distintos usando la librería Matplotlib (repasen Clase 4). Uno programandolo con el estilo *pyplot* y otro gráfico de estilo *orientada a objetos*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "for country in df[\"País\"].unique():\n",
    "    subset = df[(df[\"País\"] == country) & (df[\"Indicador\"] == \"GDP (current US$)\")]\n",
    "    plt.plot(subset[\"Año\"], subset[\"Valor\"], marker='o', label=country)\n",
    "plt.xlabel(\"Year\") #xlabel\n",
    "plt.ylabel(\"GDP (current US$)\") #ylabel\n",
    "plt.title(\"GDP Over Time (Pyplot Style)\") #title\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Resolver acá estilo orientado-objetos \n",
    "# Tip: aprovechar este estilo de programar una figura para hacerlo más lindo \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parte B"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ejercicio 4\n",
    "De la página de noticias del [diario La Nación](https://www.lanacion.com.ar/) o cualquier diario que les interese, utilicen herramientas de web scraping para obtener los **links** de las noticias de la portada. Guarden los links obtenidos en un dataframe y expórtenlo a un archivo de excel.\n",
    "\n",
    "Nota 1: es posible que logren obtener los links a las noticias sin el dominio: \"https://www.lanacion.com.ar/\". De ser así, concatenen el dominio a la ruta del link obtenido, tal que se obtenga un link al que se pueda acceder. Es decir, que las cadenas de caracteres finales tendrán la forma: https://www.lanacion.com.ar/*texto_obtenido*)\n",
    "\n",
    "Nota 2: junto con su entrega, adjunten una captura de la página de noticias al momento de correr su código. Eso servirá al momento de la corrección para verificar que los links obtenidos hacen referencia a las noticias de ese día y hora."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Resolver acá\n"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "colab": {
   "name": "TP1 - Parte 1.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
